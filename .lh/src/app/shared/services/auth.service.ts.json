{
    "sourceFile": "src/app/shared/services/auth.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1683565538561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1683565553817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,9 @@\n import { Injectable, NgZone } from '@angular/core';\n import { User } from '../services/user';\n import * as auth from 'firebase/auth';\n import { AngularFireAuth } from '@angular/fire/compat/auth';\n-import {\n-  AngularFirestore,\n-  AngularFirestoreDocument,\n-} from '@angular/fire/compat/firestore';\n+import { AngularFirestore, AngularFirestoreDocument, } from '@angular/fire/compat/firestore';\n import { Router } from '@angular/router';\n @Injectable({\n   providedIn: 'root',\n })\n"
                },
                {
                    "date": 1683565707151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,128 +0,0 @@\n-import { Injectable, NgZone } from '@angular/core';\n-import { User } from '../services/user';\n-import * as auth from 'firebase/auth';\n-import { AngularFireAuth } from '@angular/fire/compat/auth';\n-import { AngularFirestore, AngularFirestoreDocument, } from '@angular/fire/compat/firestore';\n-import { Router } from '@angular/router';\n-@Injectable({\n-  providedIn: 'root',\n-})\n-export class AuthService {\n-  userData: any; // Save logged in user data\n-  constructor(\n-    public afs: AngularFirestore, // Inject Firestore service\n-    public afAuth: AngularFireAuth, // Inject Firebase auth service\n-    public router: Router,\n-    public ngZone: NgZone // NgZone service to remove outside scope warning\n-  ) {\n-    /* Saving user data in localstorage when \n-    logged in and setting up null when logged out */\n-    this.afAuth.authState.subscribe((user) => {\n-      if (user) {\n-        this.userData = user;\n-        localStorage.setItem('user', JSON.stringify(this.userData));\n-        JSON.parse(localStorage.getItem('user')!);\n-      } else {\n-        localStorage.setItem('user', 'null');\n-        JSON.parse(localStorage.getItem('user')!);\n-      }\n-    });\n-  }\n-  // Sign in with email/password\n-  SignIn(email: string, password: string) {\n-    return this.afAuth\n-      .signInWithEmailAndPassword(email, password)\n-      .then((result) => {\n-        this.SetUserData(result.user);\n-        this.afAuth.authState.subscribe((user) => {\n-          if (user) {\n-            this.router.navigate(['dashboard']);\n-          }\n-        });\n-      })\n-      .catch((error) => {\n-        window.alert(error.message);\n-      });\n-  }\n-  // Sign up with email/password\n-  SignUp(email: string, password: string) {\n-    return this.afAuth\n-      .createUserWithEmailAndPassword(email, password)\n-      .then((result) => {\n-        /* Call the SendVerificaitonMail() function when new user sign \n-        up and returns promise */\n-        this.SendVerificationMail();\n-        this.SetUserData(result.user);\n-      })\n-      .catch((error) => {\n-        window.alert(error.message);\n-      });\n-  }\n-  // Send email verfificaiton when new user sign up\n-  SendVerificationMail() {\n-    return this.afAuth.currentUser\n-      .then((u: any) => u.sendEmailVerification())\n-      .then(() => {\n-        this.router.navigate(['verify-email-address']);\n-      });\n-  }\n-  // Reset Forggot password\n-  ForgotPassword(passwordResetEmail: string) {\n-    return this.afAuth\n-      .sendPasswordResetEmail(passwordResetEmail)\n-      .then(() => {\n-        window.alert('Password reset email sent, check your inbox.');\n-      })\n-      .catch((error) => {\n-        window.alert(error);\n-      });\n-  }\n-  // Returns true when user is looged in and email is verified\n-  get isLoggedIn(): boolean {\n-    const user = JSON.parse(localStorage.getItem('user')!);\n-    return user !== null && user.emailVerified !== false ? true : false;\n-  }\n-  // Sign in with Google\n-  GoogleAuth() {\n-    return this.AuthLogin(new auth.GoogleAuthProvider()).then((res: any) => {\n-      this.router.navigate(['dashboard']);\n-    });\n-  }\n-  // Auth logic to run auth providers\n-  AuthLogin(provider: any) {\n-    return this.afAuth\n-      .signInWithPopup(provider)\n-      .then((result) => {\n-        this.router.navigate(['dashboard']);\n-        this.SetUserData(result.user);\n-      })\n-      .catch((error) => {\n-        window.alert(error);\n-      });\n-  }\n-  /* Setting up user data when sign in with username/password, \n-  sign up with username/password and sign in with social auth  \n-  provider in Firestore database using AngularFirestore + AngularFirestoreDocument service */\n-  SetUserData(user: any) {\n-    const userRef: AngularFirestoreDocument<any> = this.afs.doc(\n-      `users/${user.uid}`\n-    );\n-    const userData: User = {\n-      uid: user.uid,\n-      email: user.email,\n-      displayName: user.displayName,\n-      photoURL: user.photoURL,\n-      emailVerified: user.emailVerified,\n-    };\n-    return userRef.set(userData, {\n-      merge: true,\n-    });\n-  }\n-  // Sign out\n-  SignOut() {\n-    return this.afAuth.signOut().then(() => {\n-      localStorage.removeItem('user');\n-      this.router.navigate(['sign-in']);\n-    });\n-  }\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1683565724413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,128 @@\n+import { Injectable, NgZone } from '@angular/core';\n+import { User } from '../services/user';\n+import * as auth from 'firebase/auth';\n+import { AngularFireAuth } from '@angular/fire/compat/auth';\n+import { AngularFirestore, AngularFirestoreDocument, } from '@angular/fire/compat/firestore';\n+import { Router } from '@angular/router';\n+@Injectable({\n+  providedIn: 'root',\n+})\n+export class AuthService {\n+  userData: any; // Save logged in user data\n+  constructor(\n+    public afs: AngularFirestore, // Inject Firestore service\n+    public afAuth: AngularFireAuth, // Inject Firebase auth service\n+    public router: Router,\n+    public ngZone: NgZone // NgZone service to remove outside scope warning\n+  ) {\n+    /* Saving user data in localstorage when \n+    logged in and setting up null when logged out */\n+    this.afAuth.authState.subscribe((user) => {\n+      if (user) {\n+        this.userData = user;\n+        localStorage.setItem('user', JSON.stringify(this.userData));\n+        JSON.parse(localStorage.getItem('user')!);\n+      } else {\n+        localStorage.setItem('user', 'null');\n+        JSON.parse(localStorage.getItem('user')!);\n+      }\n+    });\n+  }\n+  // Sign in with email/password\n+  SignIn(email: string, password: string) {\n+    return this.afAuth\n+      .signInWithEmailAndPassword(email, password)\n+      .then((result) => {\n+        this.SetUserData(result.user);\n+        this.afAuth.authState.subscribe((user) => {\n+          if (user) {\n+            this.router.navigate(['dashboard']);\n+          }\n+        });\n+      })\n+      .catch((error) => {\n+        window.alert(error.message);\n+      });\n+  }\n+  // Sign up with email/password\n+  SignUp(email: string, password: string) {\n+    return this.afAuth\n+      .createUserWithEmailAndPassword(email, password)\n+      .then((result) => {\n+        /* Call the SendVerificaitonMail() function when new user sign \n+        up and returns promise */\n+        this.SendVerificationMail();\n+        this.SetUserData(result.user);\n+      })\n+      .catch((error) => {\n+        window.alert(error.message);\n+      });\n+  }\n+  // Send email verfificaiton when new user sign up\n+  SendVerificationMail() {\n+    return this.afAuth.currentUser\n+      .then((u: any) => u.sendEmailVerification())\n+      .then(() => {\n+        this.router.navigate(['verify-email-address']);\n+      });\n+  }\n+  // Reset Forggot password\n+  ForgotPassword(passwordResetEmail: string) {\n+    return this.afAuth\n+      .sendPasswordResetEmail(passwordResetEmail)\n+      .then(() => {\n+        window.alert('Password reset email sent, check your inbox.');\n+      })\n+      .catch((error) => {\n+        window.alert(error);\n+      });\n+  }\n+  // Returns true when user is looged in and email is verified\n+  get isLoggedIn(): boolean {\n+    const user = JSON.parse(localStorage.getItem('user')!);\n+    return user !== null && user.emailVerified !== false ? true : false;\n+  }\n+  // Sign in with Google\n+  GoogleAuth() {\n+    return this.AuthLogin(new auth.GoogleAuthProvider()).then((res: any) => {\n+      this.router.navigate(['dashboard']);\n+    });\n+  }\n+  // Auth logic to run auth providers\n+  AuthLogin(provider: any) {\n+    return this.afAuth\n+      .signInWithPopup(provider)\n+      .then((result) => {\n+        this.router.navigate(['dashboard']);\n+        this.SetUserData(result.user);\n+      })\n+      .catch((error) => {\n+        window.alert(error);\n+      });\n+  }\n+  /* Setting up user data when sign in with username/password, \n+  sign up with username/password and sign in with social auth  \n+  provider in Firestore database using AngularFirestore + AngularFirestoreDocument service */\n+  SetUserData(user: any) {\n+    const userRef: AngularFirestoreDocument<any> = this.afs.doc(\n+      `users/${user.uid}`\n+    );\n+    const userData: User = {\n+      uid: user.uid,\n+      email: user.email,\n+      displayName: user.displayName,\n+      photoURL: user.photoURL,\n+      emailVerified: user.emailVerified,\n+    };\n+    return userRef.set(userData, {\n+      merge: true,\n+    });\n+  }\n+  // Sign out\n+  SignOut() {\n+    return this.afAuth.signOut().then(() => {\n+      localStorage.removeItem('user');\n+      this.router.navigate(['sign-in']);\n+    });\n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1683568877405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,128 +0,0 @@\n-import { Injectable, NgZone } from '@angular/core';\n-import { User } from '../services/user';\n-import * as auth from 'firebase/auth';\n-import { AngularFireAuth } from '@angular/fire/compat/auth';\n-import { AngularFirestore, AngularFirestoreDocument, } from '@angular/fire/compat/firestore';\n-import { Router } from '@angular/router';\n-@Injectable({\n-  providedIn: 'root',\n-})\n-export class AuthService {\n-  userData: any; // Save logged in user data\n-  constructor(\n-    public afs: AngularFirestore, // Inject Firestore service\n-    public afAuth: AngularFireAuth, // Inject Firebase auth service\n-    public router: Router,\n-    public ngZone: NgZone // NgZone service to remove outside scope warning\n-  ) {\n-    /* Saving user data in localstorage when \n-    logged in and setting up null when logged out */\n-    this.afAuth.authState.subscribe((user) => {\n-      if (user) {\n-        this.userData = user;\n-        localStorage.setItem('user', JSON.stringify(this.userData));\n-        JSON.parse(localStorage.getItem('user')!);\n-      } else {\n-        localStorage.setItem('user', 'null');\n-        JSON.parse(localStorage.getItem('user')!);\n-      }\n-    });\n-  }\n-  // Sign in with email/password\n-  SignIn(email: string, password: string) {\n-    return this.afAuth\n-      .signInWithEmailAndPassword(email, password)\n-      .then((result) => {\n-        this.SetUserData(result.user);\n-        this.afAuth.authState.subscribe((user) => {\n-          if (user) {\n-            this.router.navigate(['dashboard']);\n-          }\n-        });\n-      })\n-      .catch((error) => {\n-        window.alert(error.message);\n-      });\n-  }\n-  // Sign up with email/password\n-  SignUp(email: string, password: string) {\n-    return this.afAuth\n-      .createUserWithEmailAndPassword(email, password)\n-      .then((result) => {\n-        /* Call the SendVerificaitonMail() function when new user sign \n-        up and returns promise */\n-        this.SendVerificationMail();\n-        this.SetUserData(result.user);\n-      })\n-      .catch((error) => {\n-        window.alert(error.message);\n-      });\n-  }\n-  // Send email verfificaiton when new user sign up\n-  SendVerificationMail() {\n-    return this.afAuth.currentUser\n-      .then((u: any) => u.sendEmailVerification())\n-      .then(() => {\n-        this.router.navigate(['verify-email-address']);\n-      });\n-  }\n-  // Reset Forggot password\n-  ForgotPassword(passwordResetEmail: string) {\n-    return this.afAuth\n-      .sendPasswordResetEmail(passwordResetEmail)\n-      .then(() => {\n-        window.alert('Password reset email sent, check your inbox.');\n-      })\n-      .catch((error) => {\n-        window.alert(error);\n-      });\n-  }\n-  // Returns true when user is looged in and email is verified\n-  get isLoggedIn(): boolean {\n-    const user = JSON.parse(localStorage.getItem('user')!);\n-    return user !== null && user.emailVerified !== false ? true : false;\n-  }\n-  // Sign in with Google\n-  GoogleAuth() {\n-    return this.AuthLogin(new auth.GoogleAuthProvider()).then((res: any) => {\n-      this.router.navigate(['dashboard']);\n-    });\n-  }\n-  // Auth logic to run auth providers\n-  AuthLogin(provider: any) {\n-    return this.afAuth\n-      .signInWithPopup(provider)\n-      .then((result) => {\n-        this.router.navigate(['dashboard']);\n-        this.SetUserData(result.user);\n-      })\n-      .catch((error) => {\n-        window.alert(error);\n-      });\n-  }\n-  /* Setting up user data when sign in with username/password, \n-  sign up with username/password and sign in with social auth  \n-  provider in Firestore database using AngularFirestore + AngularFirestoreDocument service */\n-  SetUserData(user: any) {\n-    const userRef: AngularFirestoreDocument<any> = this.afs.doc(\n-      `users/${user.uid}`\n-    );\n-    const userData: User = {\n-      uid: user.uid,\n-      email: user.email,\n-      displayName: user.displayName,\n-      photoURL: user.photoURL,\n-      emailVerified: user.emailVerified,\n-    };\n-    return userRef.set(userData, {\n-      merge: true,\n-    });\n-  }\n-  // Sign out\n-  SignOut() {\n-    return this.afAuth.signOut().then(() => {\n-      localStorage.removeItem('user');\n-      this.router.navigate(['sign-in']);\n-    });\n-  }\n-}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1683565538561,
            "name": "Commit-0",
            "content": "import { Injectable, NgZone } from '@angular/core';\nimport { User } from '../services/user';\nimport * as auth from 'firebase/auth';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport {\n  AngularFirestore,\n  AngularFirestoreDocument,\n} from '@angular/fire/compat/firestore';\nimport { Router } from '@angular/router';\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  userData: any; // Save logged in user data\n  constructor(\n    public afs: AngularFirestore, // Inject Firestore service\n    public afAuth: AngularFireAuth, // Inject Firebase auth service\n    public router: Router,\n    public ngZone: NgZone // NgZone service to remove outside scope warning\n  ) {\n    /* Saving user data in localstorage when \n    logged in and setting up null when logged out */\n    this.afAuth.authState.subscribe((user) => {\n      if (user) {\n        this.userData = user;\n        localStorage.setItem('user', JSON.stringify(this.userData));\n        JSON.parse(localStorage.getItem('user')!);\n      } else {\n        localStorage.setItem('user', 'null');\n        JSON.parse(localStorage.getItem('user')!);\n      }\n    });\n  }\n  // Sign in with email/password\n  SignIn(email: string, password: string) {\n    return this.afAuth\n      .signInWithEmailAndPassword(email, password)\n      .then((result) => {\n        this.SetUserData(result.user);\n        this.afAuth.authState.subscribe((user) => {\n          if (user) {\n            this.router.navigate(['dashboard']);\n          }\n        });\n      })\n      .catch((error) => {\n        window.alert(error.message);\n      });\n  }\n  // Sign up with email/password\n  SignUp(email: string, password: string) {\n    return this.afAuth\n      .createUserWithEmailAndPassword(email, password)\n      .then((result) => {\n        /* Call the SendVerificaitonMail() function when new user sign \n        up and returns promise */\n        this.SendVerificationMail();\n        this.SetUserData(result.user);\n      })\n      .catch((error) => {\n        window.alert(error.message);\n      });\n  }\n  // Send email verfificaiton when new user sign up\n  SendVerificationMail() {\n    return this.afAuth.currentUser\n      .then((u: any) => u.sendEmailVerification())\n      .then(() => {\n        this.router.navigate(['verify-email-address']);\n      });\n  }\n  // Reset Forggot password\n  ForgotPassword(passwordResetEmail: string) {\n    return this.afAuth\n      .sendPasswordResetEmail(passwordResetEmail)\n      .then(() => {\n        window.alert('Password reset email sent, check your inbox.');\n      })\n      .catch((error) => {\n        window.alert(error);\n      });\n  }\n  // Returns true when user is looged in and email is verified\n  get isLoggedIn(): boolean {\n    const user = JSON.parse(localStorage.getItem('user')!);\n    return user !== null && user.emailVerified !== false ? true : false;\n  }\n  // Sign in with Google\n  GoogleAuth() {\n    return this.AuthLogin(new auth.GoogleAuthProvider()).then((res: any) => {\n      this.router.navigate(['dashboard']);\n    });\n  }\n  // Auth logic to run auth providers\n  AuthLogin(provider: any) {\n    return this.afAuth\n      .signInWithPopup(provider)\n      .then((result) => {\n        this.router.navigate(['dashboard']);\n        this.SetUserData(result.user);\n      })\n      .catch((error) => {\n        window.alert(error);\n      });\n  }\n  /* Setting up user data when sign in with username/password, \n  sign up with username/password and sign in with social auth  \n  provider in Firestore database using AngularFirestore + AngularFirestoreDocument service */\n  SetUserData(user: any) {\n    const userRef: AngularFirestoreDocument<any> = this.afs.doc(\n      `users/${user.uid}`\n    );\n    const userData: User = {\n      uid: user.uid,\n      email: user.email,\n      displayName: user.displayName,\n      photoURL: user.photoURL,\n      emailVerified: user.emailVerified,\n    };\n    return userRef.set(userData, {\n      merge: true,\n    });\n  }\n  // Sign out\n  SignOut() {\n    return this.afAuth.signOut().then(() => {\n      localStorage.removeItem('user');\n      this.router.navigate(['sign-in']);\n    });\n  }\n}"
        }
    ]
}